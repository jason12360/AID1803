day03回顾

字符串
    raw原始字符串
    格式 r'字符串内容' r''字符串内容'' r'''字符串内容'''
    作用：让转义字符失效

    字符串的运算：
        + += * *=

    字符串的比较：
        <,<=,>,>=,==,!=
     '5' > '11' #True

    in / not in
    语法：对象 in/not in 容器
    作用：用于序列，字典，集合等容器中，判断某个值是否在这个容器里
        s = 'abcd'

        'a' in s #True

python 运算符的优先级：
** 幂运算
~+-
*/%//
<< >>
&
^
|
< <= > >= == ! is /is not, not in/in
not
and 
or
if else

    字符串的索引
    语法：
        字符串[索引]  

    切片 slice
    语法：
        字符串[(起始索引):(终止索引):(步进)]
        ()里的内容可以省略
        s = 'abcd'
        s[::2] #s[0],s[2]

序列中常用函数
    len(seq)
    max(x)
    min(x)
字符串ascii转换函数：
    ord(c)
    chr(i)
整数转换为字符串函数
    bin(x)
    oct(x)
    hex(x)
    字符串的常用函数
        s = 'abc'
        s.isdigit()
        s.isspace()
        s.islower()
        s.isupper()
        s.center(wide[,fill])
        s.count(sub[,start[,end]])
        s.find(sub[,start[,end]])
        s.strip()
        s.lstrip()
        s.rstrip()
        s.lower()
        s.upper()
        s.replace(old,new[,count])
字符串的格式化
    运算符：%
    语法：
    '%11.4 类型码'  %（参数）

while 循环
格式：while 真值表达式：
        语句
    else：
        语句2

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

day04

while 语句嵌套：
    while 真值表达式：
        ...
        while 真值表达式：
        else:
        ...
    else:
        ...
练习：
    输入一个数打印指定宽度的正方形
    输入5
    打印如下图形
    1 2 3 4 5
    2 3 4 5 6
    3 4 5 6 7
    4 5 6 7 8
    5 6 7 8 9 
    见day04practise01.py
    打印 1~20 的整数，打印在一行显示，每个数字之间用一个空格隔开，打印十行
    见day04practise02.py

break语句：
作用： 
    用于循环语句(while,for)中，用来终止当前循环语句的执行
说明：
    当break语句执行后，此循环语句break之后的语句将不再执行
    break语句通常和if语句组合使用
    break语句终止循环式，循环语句else子句的语句将不会执行
    break语句只能终止当前循环语句的执行，若有循环嵌套时，不会跳出嵌套的外层循环
    break语句只能在循环语句（while for语句)内部使用

for语句
作用:
    用来遍历序列或可迭代对象的每个元素
遍历:
    不重复的查看每一个元素
可迭代对象是指能依次获取数据的对象
可迭代对象包括：
    字符串
    列表
    字典
    集合
    迭代器等
for循环的语法：
    for 变量 in 可迭代对象：
        语句块1
    else:
        语句块2

说明：
    1.变量依次用迭代对象每次给出的元素依次赋值，然后执行语句块1
    2.可迭代对象不能提供数据元素后，执行else子句部分语句，然后退出循环
    3.else子句部分可以省略（同while语句类似)
    4.当在循环内break终止循环时，else子句部分不会执行

练习：
    任意输入一段字符串
    1)计算出字符'a'的个数，并打印出来
    2)计算出空格的个数并打印出来
      (要求用for来做)
    见day04practise03.py

range()函数：
格式：
    range(start,stop[,step])从start开始，每次生成一个整数后移动step直到stop为止(不包含stop,且step可以为负数)
    range(stop) 从零开始，每次生成一个整数后加1操作，到stop位置（不包含stop)
作用：
    用来生成一系列整数的可迭代对象（整数序列生成器）

练习1
    s= input('请输入')
    输出'第1个字符是：'
       '第2个字符是：
day04practise04.py
练习2
    写一个程序
    输入一个开始整数用变量begin绑定
    输入一个结束整数用变量end绑定
    打印begin到end的每一个整数
day04practise05.py

for xxx: 
    pass
while True:
    for x in y:
        pass

示例：
    已知有字符串'ABC'和字符串'123'，用以上两个字符串生成如下字符串'A1''A2''A3'....
见day04practise01.py


continue 语句
作用：
    用于循环语句（while，for)语句，当continue执行后，不再执行本次循环内continue之后的语句，重新开始新的循环
说明：
    在for语句中执行continue语句，将会从可迭代对象中取下一个元素，绑定变量后再次循环
    在while语句中，执行continue将会直接跳转到while语句真的真值表达式处，重新判断循环条件

练习：
    输入一个数字，打印1，n之间的寄数，不包含n
    见day04practise07.py
    
    2.写程序，输入一个正整数，判断之个数是否为质数 
    



序列的类型
    字符串
    列表（list）
    元组
    字节串  
    字节数组

创建空的列表
l = []
创建一个非空列表
    l=[1,2,'ab',True]
    l=[1,2,[3,4]]
列表的构造方法
    l=list()
    l=list('abc')
    l=list(range(5))

列表算数运算
    算数运算：
        + += * *=
    +用于拼接列表
        l1 = [1,2,3,4]
        l2 = [5]
        l1 + l2 =[1,2,3,4,5]
    +=用于原列表于右侧列表进行拼接，并用变量重新绑定新列表
        l1 = [1,2,3,4]
        l2 = [5]
        l1 += l2
        l1==>[1,2,3,4,5]

    *生成重复的列表
        l1 = [1,2,3] 
        l1*2 = [1,2,3,1,2,3]
    *=生成重复的列表后用变量绑定
        l1 = [1,2,3]
        l1*=2
        l1 = [1,2,3,1,2,3]
        内存地址不变

比较运算符：
< <= > >= == !=
[1,2,3]<[1,2,4] True
[1,3,2]>[1,2,4] True

以下规则与列表不同，因为列表可以任意类型的数据
[1,2]>['a'] unorderable types: int() > str()
练习：
    输入三行文字，将这三行文字保存于一个列表L中，并打印
    再打印列表中字符串所有字符的个数
如：
    请输入：a b c回车
    请输入：1 2 3 4 回车
    生成如下列表：
    print（L）, ['abc','1234']
    总字符数：7
见day04practise09.py

列表 in/not in
作用：
    判断一个值是否在列表里，如果存在则返回True，否则返回Flase
    同字符串中的in运算符规则
语法
    对象 in 列表

列表的索引操作：
    语法：
        列表[索引]
    用法：
        等同于字符串索引
        索引分为正向索引和反向索引，规则与字符串索引完全相同

    示例：
        l = [1,2,3,4]
        l[0] 1
        l[-1] 4
    列表的索引赋值
        列表是可变的，可通过索引赋值来改变列表的元素】

练习：
    1.输入三个数,存于列表中，打印出这三个数的最大值，最小值和平均值
    见day04practise10.py

    2.输入任意个数，输入负数结束，打印出这些数的最大值，最小值
    见day04practise11.py

列表的切片
    列表[:]
    列表[::]
    列表的切片规则等同于字符串
示例：
    l=[1,2,3,4,5]
    l2=l[::2] #[1,3,5]
列表切片的赋值操作：
作用：
    改变原列表，可以插入和修改列表中的元素
语法：
    列表[切片] = 可迭代对象
说明：
    切片赋值时，切片的切出块数大于1时，切片的块数必须可迭代对象取出数据的个数相同(切出的元素不是相邻)
    切片切出块数为1时，则可变更为多个数据。
示例：
    l=[1,2,3,4]
    l[0:1]= [1.1,1.2]
    ==> 1.1,1.2,2,3,4
    l[0:2]=[3]
    ==>[3, 3, 4]

del语句
    del l[0:2] 

插入：
    l=[1,2]
    l[0:0] = 1
    l==>l[1,1,2]

phython3中常用的序列的函数：
len(seq) 返回序列长度
max(seq) 返回最大值
min(seq) 返回最小值
sum(seq) 返回序列中所有元素的和（所有数都要为数字）
any(seq) 真值测试，如果seq中有一个为True，则返回True，否则返回False
all(seq) 真值测试，如果seq中所有都为True，则返回True，否则返回False

常用的方法：
L.index(v[,begin[,end]])           返回元素的索引下标，end为结束索引
                                   v值不存在时，触发ValueError错误
L.insert(index,object)             将某个元素插入到列表的指定位置
L.count(x)                         返回x的个数
L.remove(x)                        从列表中删除第一次出现的x元素
L.append(x)                        向列表中追加一个元素
L.extend(lst)                      向列表中追加一个列表
L.clear()                          清空列表
L.sort(reverse = False)            将列表中的元素进行排序，默认按升值排列
L.reverse()                        列表的反转
L.pop([索引])                       删除索引对应的元素，如果不加索引，
                                   默认删除最后的元素，同时返回删除元素
L.copy()                           复制（浅拷贝）


    l

练习：
    写一个程序，让用户输入很多个正整数，当输入小于零的数时结束输入
    1）输出这些数的和
    2）输出这些数的最大的数和第二大的数
    3）删除最小的数
    4）按原来输入的顺序打印出剩余的这些数


