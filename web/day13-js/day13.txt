1.DOM
	1.增加节点
		1.创建节点
			语法:
				var elem = document.createElement('元素名');
			练习:
				通过一个按钮动态创建一对div
				为div设置id为container
				设置div文本为动态创建的div
		2.增加节点
			将创建好的元素添加到网页中
			1.document.body.appendChild(elem)
				向body中追加elem新元素
			2.parentNode.appendChild(elem)
				向parentNode的内部追加elem新元素
				parentNode可以表示页面上的任意一个节点
			3.parentNode.insertBefore(newElem,oldElem)
				将newElem插入到parentNode中oldElem之前
	2.删除节点
		在DOM中,删除节点的行为只能哟父元素发起
		1.删除body中的子元素
			document.body.removeChild(elem);
		2.删除其他元素的子元素
			parentNode.removeChild(elem);
			删除parentNode中的elem子元素
2.事件
	1.什么是事件
		通过由用户的行为来激发的操作
	2.触发事件的行为
		所有的事件在绑定的时候,前面要加on
		1.鼠标事件
			click:鼠标点击事件
			mouseover:鼠标移入元素激发的事件
			mouseout:鼠标移出元素激发事件
			mousemove:鼠标在元素内移动时的事件
		2.键盘事件
			keydown:键位按下时事件
			keypress:键位按下时的事件
			keyup:键位抬起时的事件
		3.状态改变事件
			load:当元素加载完成时激发的事件
			change:当元素发生改变时激发的事件(<select>)
			focus:当元素获取焦点时触发的事件
			blur:当元素失去焦点时的事件
			submit:当表单被提交的时候触发的事件
	3.绑定事件的方式:
		1.在元素中绑定事件
			语法:<标记 on事件名='执行函数()'>
		2.在js中动态的为元素绑定事件
			var div = document.getElementById('d1');
			div.on事件名=function(){
				事件操作
			}
		注意:在动态绑定事件中,在事件处理函数内,允许通过this关键字,来表示当前的元素(DOM元素)
	4.事件行为
		1.load事件
			常用:为body绑定load事件,目的是为了在所有内容都加载
				完成之后在执行的操作要放在此处
				可以使一些绑定元素事件提前到元素创建前
			1.<body onload=''><body>
			2.动态绑定
				window.onload = function(){
				事件操作
				}
		2.submit事件
			只有在表单被提交时才会触发
			注意:该事件需要一个boolean 的返回值来通知表单是否提交.
			返回true,可以提交,返回false.不能提交
	5.事件对象(事件参数对象,event对象)
		1.什么是事件对象
			任何一个事件在触发后,都会自动产生一个event对象,
			event对象中包含与当前事件相关的一些属性和方法
		2.获取event对象
			1.在html元素中绑定事件
			<标记 onclick='btn(event)'>event --事件实参

			function btn(event){
				事件处理函数
			}
			2.在js中动态为元素绑定事件
				var d1 = $('d1')
				d1.onclick=function(event){
					event表示的就是事件对象
				}
		3.事件对象的常用属性
			1.事件源
				1.什么是事件源
					触发当前事件的元素是谁
				2.获取事件源
					通过event.target获取事件源
			2.鼠标事件(事件对象的而常用属性)
				鼠标事件
					click,mouseover,mouseout,mousemove
					1.offsetX,offsetY
						获取鼠标在元素上的坐标点
						以元素的左上角为(0,0)
					2.clientX,clientY
						获取鼠标在网页上的坐标点
					3.screenX,screenY
						获取鼠标在屏幕上的坐标点
			3.键盘事件(事件对象的常用属性)
				键盘事件:keypress,keydown,keyup
				1.keypress
					只有在输入字符的前提下才会被激发
					1)which
						当前按下的字符的ASCII
					2)key
						当前按下的字符
					注意:该事件允许通过一个返回值,通知元素是否要处理该事件,返回值true,正常显示,返回为false,则终止显示
				2.keydown
					按下键盘键位时就会被触发,无论是否有字符的输入
					1.which
						当前按下键位的键位码,只区分按键,并不区分大小写
						大小写字符是同一键位,所以键位码相同
					返回值 同keypress
					
