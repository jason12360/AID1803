1.转发与重定向
	1.转发(略)
	2.重定向
		1.什么是重定向
			重新向新的访问地址发送请求(服务端)
		2.语法
			from django.http import HttpResponseRedirect
			return HttpResponseRedirect(url)
2.ORM操作
	在原有的基础上修改数据库
		更新Author表中所有人的年龄,都+10岁
		update index_author set age = age + 10
		1.F()操作
			1.作用
				在执行操作中获取某列的值的时候使用
			2.语法
				F('列名')
				要先导包
				from django.db.models import F
				Author.objects.all.update(age=F("age")+10)
		2.Q()操作
			1.作用:在查询条件中可以完成获得操作
			2.语法:
				from django.db.models import Q
				Q(表达式)|Q(表达式)

				ex:
				查询Author实体中,id为6或年龄大衣等于70的
				Author.object.filter(Q(id=6)|Q(age__gte=70))
		3.原生的数据库操作方法
			1.查询
				函数:raw(sql语句)
				语法:Entry.objects.raw(sql)
			2.增删改
				def doSQL(request):
					with connection.cursor() as cursor:
						sql = 'delete from author'
						cursor.execute(sql)
						return....

3.使用后台管理Models
	1.后台的配置
		登录地址:http://localhost:8000/admin

		创建后台管理员
		./manage.py createsuperuser
		username:输入用户名,默认为tarena
		email address:电子邮件 
		Password:密码
		Password(again):重复密码
	2.基本管理
		1.在应用中的admin.py中注册要管理的实体类
			1.admin.py
				作用:注册需要管理的Models,只有在此注册的Models才允许被管理
			2.注册Models
				套入模型: from .models import * 
				admin.site.register(Entry)
		2.修改models.py处理显示内容
			1.允许在models.py中为各个class追加
				def __str__(self):
					return self.属性名
			2.通过Models类的内部类Meta来定义每个类的展现形式
				Class Author(models.Model):
					... ... 
					class Meta:
						1.db_table
							指定该实体类对应到的表的名称
						2.verbose_name
							定义当前实体类在后台管理的列表页中的名称(单数形式)
						3.verbose_name_plural
							效果同上,是复数形式
						4.ordering
							指定实体数据列表页中数据的排序规则
							取值是一个,默认按按升序排序,降序则需要手动添加符号
					练习:
						1.在后台管理列表页中,每个对象都要展现他们对应的名称
						2.修改publisher的mata内部类:
							更改表名为publisher
							修改其展示名称为出版社
						3.修改Book的Meta
							1.更改表名为 book
							2.修改其展示名称为书籍
							3.指定排序 - 按照出版时间降序排序
	3.高级管理
		1.在admin.py中创建高级管理类
			1.定义 EntryAdmin, 继承自admin.ModelAdmin
				class AuthorAdmin(admin.ModelAdmin):
					pass
			2.注册高级管理类
				admin.site.register(Entry,EntryAdmin)
		2.定制高级管理信息:
			1.list_display
				作用:指定在列表页中能够显示的字段们
				取值:有属性名称组成的元祖或列表
				ex:
					list_display=['name','age','email']
			2.list_display_links
				作用:在列表页中也能够链接到详情页的字段们
				取值:有属性名称组成的元祖或列表
				注意:取值必须出现在list_display的取值中
			3.list_editable
				作用:指定在列表页中就允许被编辑的字段们
				取值:有属性名称组成的元祖或列表
				注意:取值不能出现在以上的list_display_links中
			4.search_fields
				作用:添加允许被搜索的字段们
				取值:有属性名称组成的元组或列表
			5.list_filter
				作用:在列表的右侧增加过滤器实现快速筛选
				取值:有属性名称组成的元祖或列表
			6.date_hierarchy
				作用:在列表页的顶端增加一个时间选择器
				取值:必须是DateField或者DatetimeField
			7.fields
				作用:在详情页面中选择显示哪些字段并按什么样的顺序显示
				取值:有属性名称组成的元祖或列表
			8.fieldsets
				作用:在详情页中用字段们进行分组显示
				注意:fieldsets 与 fields 是不能共存的
				语法:
					fieldsets = (
						#分组1
						(
						'分组名称',{
							'fields':('属性1','属性2'),
							'classes':('collapse',)#组可以被折叠
							}
						),
						#分组2
						(....)
					)
4.关系映射
	1.一对一映射
		1.什么是一对一
			A表中的一条记录只能与B表中的一条记录相关联
			数据库中实现:
				A表:设置主键
				B表:增加一列,并引用自A表的主键,害的增加一个唯一约束Unique
		2.语法
			1.在关联的两个类中任何一个类中 增加:
			属性 = models.OneToOneField(Entry)
		3.查询
			class Wife(models.Model):
				...
				author = models.OneToOneField(Author)
			1.正向查询
				通过wife找author
					#获取id为1的wife的信息
					wife = Wife.Objects.get(id=1)
					#通过wife的关联属性来找author
					author = wife.author
			2.反向查询
				通过author找wife
					#获取id为14的Author的信息
					author = Author.objects.get(id=14)
					#通过author的关联属性来找wife
					wife = author.wife

					wife是Django通过OneToOneFeild在Author中默认增加的隐式属性,可以使用related_name进行更改

	
