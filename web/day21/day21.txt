1.HttpRequest
	1.CSRF 跨站点攻击
		解决方案:
			1.在settings.py中删除CsrfViewMiddleWare中间件
			2.在视图的处理函数上@csrf_protect 需要导包
			3.在模板中的<form>下的第一行增加:
				{% csrf_token %}
	2.地址栏拼参数
		手动拼写(Query String)到提交地址的后面
		http://地址/?名称1=值1&名称2=值2

	练习:
		1.完成天天果园项目中注册操作
			1.用户注册按钮时,将信息提交给后台
				访问注册页面的视图和处理注册操作的视图是同一个视图
			2.先判断手机号是否存在,如果存在给出提示(不能注册)
			3.如果手机号没问题的话,则允许注册到数据库
		2.完成天天果园项目中登录操作
			1.手机号和密码不能为空,否则不能提交
			2.在后台验证手机号或密码是否正确并给出响应提示
2.使用forms模块来处理表单
	1.forms模块的作用
		通过forms模块,允许将表单与class结合,可以自动的生成表单控件
	2.使用forms模块
		1.创建forms.py文件
		2.导入forms
			from django import forms
		3.创建class,一个class对应一个表单
			必须继承自(forms.Form类)
		4.在class中创建属性,一个属性对应一个表单控件
			(参考文档)
	3.模板中解析form对象
		1.注意
			1.需要自定义<form>
			2.需要自定义提交按钮
		2.解析方法
			1.手动解析
				在试图中创建xxForm()并发送到模板中
				ex:
					form = RemarkForm()
					return render(request,'xx.html',locals())
				手动解析:
					模板中:
					{% for field in form %}
						{{field.label}}:控件文本
						{{field}}:表示控件
					{% endfor %}
			2.自动解析
				1.{{form.as_p}}
					将表单中的每一个属性都解析成一个p标记,再显示标签及控件
				2.{{form.as_ul}}
					将表单中的每一个属性都解析成一个li标记,再显示标签及控件
				3.{{form.as_table}}
					将表单中的每一个属性都解析成一个tr标记,再显示标签及控件
					需要自定以table
	4.使用form.Form获取表单数据
		1.通过forms.Form子类的构造函数,接收post数据
			form = xxxForm(request.POST)
		2.需要让form通过验证时候再取值
			form.is_valid()
			返回true:提交的数据已经通过所有验证,允许获取表单数据
			返回false:提交的数据有暂时未通过验证的
		3.获取表单提交的数据
			通过 formed.cleaned_data(字典)接收提交的数据
			cd = form.cleaned_data
			print(cd['subject'])
	5.forms的高级处理
		将Models和Forms结合到一起使用
		1.在forms.py中,创建class,继承自forms.ModelForm
		2.创建内部类:Meta,关联Form和Models
			1.model:指定要关联的Model类是谁
			2.fields:从models中取那些字段来生成控件
				1.取值"__all__",取出全部字段生成控件
				2.取值一个列表,声明允许生成控件的字段名
			3.labels:指定每个字段关联的label,取值为字典
				labels = {
					'属性名1':'label文本1',
					'属性名2':'label文本2',
			}
