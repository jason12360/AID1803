1.外部对象
	1.BOM和DOM
	 BOM:Browser Object Model
	  	浏览器对象模型
	  	将浏览器比喻成对象-window
	  	可以通过对象灵活的操作浏览器
	2.window 对象(BOM模型)
		1.作用:
			在JS中表示浏览器的窗口
			window下的属性和方法使用的过程中,
			可以省略'window'而直接使用属性和方法
		2.window中的对话框
			1.警告框
				alert
			2.输入框
				prompt
			3.确认框
				confirm
		3.window中的定时器
			1.周期性定时器
				1.特点
					每间隔一段时间后,就执行一遍程序,反复执行
				2.声明定时器
					setInterval(fun,duration)
						fun:要周期性执行的操作,可以是匿名函数
						duration:要间隔的时间周期,以ms为单位
						return:返回创建好的定时器对象(清除定时器时使用)
				3.清除定时器
					clearInterval(timer)
					timer:要停止清除的定时器对象
			2.一次性定时器
				1.特点:
					在指定的时间间隔后,只执行一次操作
				2.声明一次性定隔:
					var ret = setTimeout(fun,time)
						fun:等待一定时间后执行的操作
						time:要等待的时长
						ret:已启动的定时器对象
				3.清除定时器:
					clearTimeout(timer)
		4.window中的属性
			1.screen属性
				作用:获取客户端显示器的相关信息
				属性:
					1.width/height
					2.availWidth/availHeight
			2.history
				1.作用
					包含当前窗口所访问过的url地址们
				2.属性 & 方法
					1.属性
						length 当前窗口访问过的url的数量
					2.方法:
						back()后退
						forward()前进
			3.location属性
				1.作用
					表示浏览器上地址栏的信息
				2.属性和方法
					1.属性:href
						表示当前窗口中正在浏览的网页地址
						如果为href赋值,相当于实现网页跳转功能
					2.方法:
						reload
						重新加载当前网页,相当于刷新
			4.navigator属性
				1.作用:
					包含浏览器的相关信息
				2.属性:
					userAgent:显示信息
	3.document对象(DOM模型)
		1.document的概述
			document对象,是DOM模型中的顶层对象,封装了所有和HTML元素相关的属性,方法以及事件

			网页在加载的时候,会在内存中生成一颗节点数(DOM树).DOM树会封装网页上 所有的内容.网页上的每个元素,每个属性,每段文本(包含注释),都会封装成DOM树上的一个单独的节点

			节点分为以下类型
				1.元素节点-表示网页中的一个元素
				2.属性节点-表示元素中的一个属性
				3.文本节点-表示元素中的文本内容
				4.注释节点-表示网页中的注释内容
				5.文档节点-表示整个HTML文档
			DOM中所提供的操作:
				1.查找节点
				2.读取节点信息
				3.修改节点信息
				4.删除节点
				5.创建节点
		2.查找节点
			1.通过元素id查找节点
				前提:元素一定要具备id属性,否则无法查找

				document.getElementById('元素ID')
				var elem=document.getElementById('元素ID')
				elem:对应ID元素在JS中的表现-DOM对象/DOM元素

			DOM属性:
				1.innerHTML
					修改/获取/设置当前DOM对象的HTML文本
				2.innerText
					修改/获取/设置当前DOM对象的普通文本
				3.value
					该属性只针对表单控件,允许获取或设置表单控件的值
				练习:
					1.创建网页
						一个文本框,一个div,一个按钮
					2.点击按钮:
						文本框文字以一级标题显示在div中
		3.读取节点信息
			1.节点的类型
				属性:nodeType
				值:
					返回1--元素节点
					返回2--属性节点
					返回3--文本节点
					返回8--注释节点
					返回9--文档节点
			2.节点的名称
				属性:nodeName
				返回值:
					元素节点&属性节点:元素名或属性名
					文本节点:#text
					文档节点:#document
					注释节点:#comment
		4.获取或设置元素节点的属性值
			1)getAttribute(attrName)
				作用:获取指定属性的值
				返回值:attrName属性对应的值
			2)setAttribute(attrName,attrValue)
				作用:修改或设置指定属性的值
				attrName:要修改或设置的属性名
				attrValue:要修改或设置的值
			3)removeAttribute(attrName)
				作用:将attrName属性从节点中删除
			4)通过dom对象.属性名获取或设置属性值
				注意:class属性不适用于该方式
		5.元素的样式(css)
			1.使用setAttribute设置class属性的值
				elem.setAttribute('class','类选择器')
			2.使用元素的className属性修改class值
				var div = $(container);
				div.className = 'red'
				注意:不能使用elem.class = '类选择器名称';
			3.使用内联方式设置属性值
				elem.style.css属性名 = '值'
				elem.style.color = 'red'
				注意:
					如果css属性名中包含'-',那么'-'要取消,并且后面单词的第一个字符变大写

二.DOM-查询节点
    1.根据ID查询节点
        document.getElementById()
    2.根据层级节点结构查询
        1)parentNode(必须记牢)
            根据当前的节点的层级结构,返回父元素节点
        2)childNodes
            根据当前节点的层级结构,返回当前元素的所有子元素数组
            注意:能够获取所有的文本节点和元素节点
        3)children(必须记牢)
            根据当前的节点的层级结构,返回当前元素的所有子元素节点数组
        4)nextSibling
            获取当前节点的下一个兄弟节点
        5)nextElementSibling(必须记牢)
            获取当前节点的下一个兄弟元素节点
        6)previousSibling
            获取当前节点的上一个兄弟节点
        7)previousElementSibling(必须记牢)
            获取当前节点的上一个兄弟元素节点
    3.通过标签名称获取页面元素
        语法:
        document.getElementsByTagName("标签名")--获取整个文档
        elem.getElementsByTagName("标签名")--获取elem对象的
        返回值:
            返回包含指定标记的元素数组们
    4.通过元素的name属性值获取元素
        语法:
        document.getElementsByName("name");
        返回值:包含指定name属性值的元素的数组
    5.通过元素的class属性值获取元素
        语法:
        document.getElementsByClassName("class")--获取整个文档
        elem.getElementsByClassName("class")--获取elem对象的
        返回值:
        返回包含指定class属性值的所有元素

	