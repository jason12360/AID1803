1.urls.py
	1.url函数
		url函数的语法
		url(rgex,views,kwargs=None,name=None)
		1.regx
			正则表达式,匹配请求的url
		2.views
			试图处理函数或其他的urls.py
		3.kwargs
			字典,用来向views传参,没有参数则省略
		4.name
			字符串,给url起别名,主要在模板中使用
	2.通过url向view传参
		1.使用正则表达式传参
			使用子组传参,一个子组是一个参数,想要多个参数的话,可以使用多个子组-()
			urlpattern = [
				#访问路径是run/的时候,交给run_views去处理
				url(r'^run/$,run_views),
				#访问路径是run/任意两位数字的时候,交给run_args_views去处理
				url(r'^run/(\d{2})$,run_args_views)
				#访问路径是run/四位数字/两位数字的时候,交给run1_args_views去处理
				url(r'^run/(\d{4})/(\d{2})/$',run1_views)
			]
			注意:
				1.在url()中,一个子组()表示一个参数	
				2.在views.py中,对应的处理函数要根据url()中子组的个数的相应的定义参数,定义的参数要位于request之后 
				e.g.
					1)url(r'^run/(\d{2}),run1_views)
						def run1_views(request,num)
		2.使用url()第三个参数,字典传参
			url(r'^show/$',showviews,{'name':'laoshe',age:'89'})

			def show_views(request,name,age)
2.Django中的应用
	1.什么是应用
		应用就是网站中的一个独立的程序模块
		在Django中,主目录一般不处理用户的具体请求的
		主目录主要做的事项目的初始化和设置,以及请求的分发
	2.创建应用
		1.命令
			./manage.py startapp 应用名称
			ex:
				./manage.py startapp news
		2.在settings.py 中进行注册
			在installed_apps中进行注册

			INSTALLED_APPS=[
				...
			]
		3.应用的结构组成
			1.migrations目录
				存放数据库中间文件(日志文件)
			2.__init__.py
				应用的初始化文件
			3.admin.py
				应用的后台管理配置文件
			4.apps.py
				应用的属性配置文件
			5.models.py
				模型文件与数据库有关
			6.test.py
				测试模块
			7.views.py
				定义视图的文件
				
3.Django模板
	1.什么是模板
		模板就是要动态给用户呈现的网页内容
		其实就是一个网页,前后段结合的一个网页
	2.模板的设置
		在setting.py中templates变量
			TEMPLATES=[
			{
				BACKEND:""
				DIRS:[...]
			}
			]
		1)BACKEND:指定模板的搜索引擎,不用动
		2)DIRS:指定模板存放的目录
			DIRS=['index.temp','music.temp']
			但是,如果DIRS中为空的话,那么Django会自动到每个应用中去搜索叫templates的目录来作为魔板的管理目录
		推荐:
			1.DIR内容保持为空
			2.在每个应用中,都创建一个templates目录
		3)APP_DIRS
			True:首先从DIRS中指定的目录查找模板,如果没有找到的话,再搜索templates目录
	3.模板的加载方式
		1.使用loader获取模板,并通过HttpResponse进行响应
			from django.template import loader
			1.通过loader加载模板
				1.通过loader.get_template('模板名称')
					t=loader.get_template('模板名称')
				2.通过t对象将模板转换为字符串
					html=t.render()
				3.通脱httpresponse将html响应给客户端
					return HttpResponse(html)
		2.使用render直接加载模板并返回
			from django.shortcuts import render

			return render(request,'模板名称')
	4.模板的语法
		1.变量
			1.作用:允许将后端的数据传递给模板,在模板中会根据变量的值进行显示
			2.在Django中允许传递给模板做变量的数据类型
				数字,字符串,列表,元祖,字典,函数,对象
			3.变量的语法
				1.loader
					dic ={
						'变量名1':'值1'
						'变量名2':'值2'
						...
					}

					t = loader.get_template('xxx.html')
					html = t.render(dic)
					return HttpResponse(html)

					在模板中显示变量:{{变量名}}
				2.render
					dic ={
						'变量名1':'值1'
						'变量名2':'值2'
						...
					}
					return render(request,'xxx.html',dic)
		2.标签
			1.什么是标签
				允许将服务器端的一些功能嵌入到模板中
			2.语法
				{%标签内容%}
			3.

		3.过滤器
			1.作用
				过滤数据
				在显示变量的数据之前,允许对数据进行筛选和改变
			2.语法
				{{变量|过滤器:参数}}
			3.简单的过滤器

	作业:
		1.创建项目 -fruitday
		2.创建应用 -index
		3.配置 路由配置模块
		4.将login.html移植到fruitday中,以模板的方式呈现给用户