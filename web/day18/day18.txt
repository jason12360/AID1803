1.模型
	1.字段类型 和字段选项
		1.字段类型(Field Type)
			1.BooleanField()
			2.CharField()
			3.DateField()
			4.DateTimeField()
			5.DecimalField()
			6.EmailField #存电子邮件 -varchar
			7.FloatField()
			8.ImageField() #存图片路径 -varchar
				Image(upload_to='/static/***/***')
			9.IntegerField()
			10.URLField()
			11.TextField()#存大量文本数据 -text
		2.字段选项(Field Option)
			1.max_length
				指定数据的最大长度
				在CharField()必须要设置的选项
			2.default
				为当前字段值认默认值
			3.null
				指定当前字段是否允许为空,默认值为false

	练习:
		完善 FruitDay中的部分Models
			1.Models:商品类型,商品,用户
			2.商品类型 - GoodType
				1.类型名称 - title 
				2.类型的图片 - picture 默认上传至static/upload/goodstype
				3.类型的描述 - desc 200chars
			3.商品 - Goods
				1.商品名称 - title
				2.商品价格 - price(DecimalField)
				3.商品规格 - spec
				3.商品图片 - picture 默认上传至static/upload/goods
				4.销售状态 - isActive(默认值为True)
			4.用户 - Users
				1.用户名 - uname
				2.密码 - upwd
				3.手机号 - uphone
				4.邮箱 - uemail
				5.状态 - isActive
	2.数据版本的切换
		1../manage.py migrate
			执行所有应用中最新版本的数据库中间文件
		2../manage.py migrate 应用名称 版本号
			执行应用中版本号对应的中间文件
		3.通过数据库自动到处Models
			./manage.py inspectdb > 文件名.py
2.模型中的CRUD
	1.通过ORM向DB中增加数据
		1. Entry.objects.create(属性=值,属性=值...)
			Entry: 具体要操作的model类

			ex:
			Author.objects.create(name='zsf',age=85)
		2. 创建一个models的对象,通过对象的save()方法完成增加
			obj= Author(name = 'zsf', age=65)
			obj.save()
		3.使用字典来构建对象,再通过save()函数完成增加
			dic = {
					'属性1':'值1'
					'属性2':'值2'
					...
				}
			obj = Entry(**dic)
			obj.save()
		练习:
			使用三种方式,分别向Book,Publisher中增加三条数据
	2.查询操作(重难点)
		通过 Entry.objects 调用查询的接口
		1.基本查询操作:
			语法: all()
			用法: Entry.object.all()
			返回: QuerySet

			返回结果:
			<QuerySet [<Author: Author object>, <Author: Author object>, <Author: Author object>, <Author: Author object>]>
		2.查询指定列
			语法: values('列1','列2',...)
			用法:Entry.object.values('列1','列2',...)
			返回:QuerySet

			ex: Author.objects.values('names','age')
			注意:values()可以用在所有的返回查询结果集的方法的后面
		3.排序函数
			语法: order_by(列1,列2)
			用法: Entry.objects.order_by('-列1','-列2')
				默认的排序是升序
				如果需要,则在前面加一个'-'
		4.对条件取反
			语法:exclude()
			用法:Entry.objects.exclude(条件)

			ex:
				1.Author.objects.exclude(id=3)
				2.Author.objects.exclude(id=3,age=85) 注意:这里的逻辑是and id=3 and age=85

		5.根据条件查询部分行的数据
			方法:filter(条件参数)
			用法:Entry.objects.filter(参数)
			1.使用Entry中的属性作为参数
				多个参数条件的话,使用,隔开,映射到sql语句上,是使用and来进行关联的
				ex:
					1.Author.objects.filter(id=1)
						select * from author where id=1
					2.Author.objects.filter(id=1,name='莫言')
						select * from author where id=1 and name='莫言'
			2.通过Field Lookup(查询表达式)完成复杂条件的构建
				查询表达式:每个查询表达式都是一个独立的查询条件,可以用在所有的有查询条件的位置处
					1.__exact
						作用:精确查询,等值判断
						用法:Entry.object.filter(id__exact=1)
					2.__contains
						作用:筛选出属性中包含指定关键字的记录(模糊查询)
					3.__lt
						作用:筛选出属性值小于指定值的记录
					4.__lte
						作用:筛选出属性值小于等于指定值的记录
					5.__gt
						作用:筛选出属性值大于指定值的记录
					6.__gte
						作用:筛选出属性值大于等于指定值的记录
					7.__startswith
						作用:筛选出以指定关键字开头的记录
					8.__endswith
						作用:筛选出以指定关键字结尾的记录
		6.查询只返回一条数据
			语法:get(条件)
			用法:Entry.objects.get(查询条件/表达式)
			注意:该函数只适用于返回一条记录时使用
		练习:
			1.访问http://localhost:8000/03_aulist/路径的时候,显示01_aulist.html视图

	3.修改数据
		1.修改单个数据
			1.通过get()得到要修改的实体对象
			2.通过实体对象的属性修改属性值
			3.再通过实体对象的save()方法保存回数据库
			ex.
				au = Author.object.get(id=1)
				au.name = '老舍'
				au.age = 45
				au.save()
		2.批量修改数据
			调用查询结果集的update()完成批量修改
	4.删除数据
		调用实体对象/查询结果集的delete()即可
		1.删除单个对象
			obj = Author.object.get(id=1)
			obj.delete()
		2.删除多个对象
			Author.object.all().delete()
		练习:
			完成删除操作
			1.点击删除连接时,删除对应的数据