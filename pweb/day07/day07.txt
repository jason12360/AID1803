day07

进程间通信：
	信号量：
		原理：给定一定的信号数量，对多个进程可见，并且多个进程均可操作，进程根据信号量的多少，可以有不同的行为

	实现：
		1.sem = multiprocess.Semaphore(num)
			功能：定义信号量
			参数: num，给定信号量的初始个数
			返回值：返回信号量对象
		2.sem.acquire() 将信号量 减一 信号量为0时调用会阻塞
		  sem.release() 将信号量 加一

cookie:
	获取当前进程对象
	multiprocessing.current_process()

	使用信号处理僵尸进程
	在父进程中，忽略子进程的发送信号
	signal(SIGCHILD,SIGIGN)

同步和互斥：
	目的：对共有资源的操作会产生争夺，同步互斥是一种解决争夺的方案

	临界资源：多个进程或者线程都可以操作的的资源
	临界区：操作临界资源的代码段

	1.同步：同步是一种合作关系，为完成某个任务多进程或者多进程之间形成一种协调，按照条件次序执行，传递告知资源情况，这种协调可能是因为阻塞关系达成的。
		
	2.互斥：互斥是一种制约关系，当一个进程或者线程进入到临界区会进行加锁操作，此时其他进程（线程）再企图操作临界资源时会阻塞，只有当资源被释放才能进行操作

	Event事件：
		e = multiprocessing.Event()
		功能：创建事件对象
		
		e.wait()
		功能：提供事件阻塞

		e.set()
		功能：对事件对象进行设置，此时wait判断如果事件被set则结束阻塞

		e.clear()
		功能：清楚对该事件对象的set

		e.is_set()
		功能：检测对象是否被set，设置返回True

	Lock锁：
		lock = multiprocessing.Lock()

		lock.acquire() 上锁
		lock.release() 解锁

		with lock: ---> 给with 代码段上锁
			...
			...
		---------------> with 代码段结束自动解锁

		*在lock对象处于上锁状态的时候，再企图上锁则会阻塞，直到锁被释放，才能继续执行上锁操作

线程
	*线程也是多任务编程的一种方法，可以使用计算机多核资源，是计算机核心分配的基本单位
	*线程又称为轻量级的进程，在创建和删除时消耗的计算机资源小

	线程和进程的关系
		*一个进程中可以包含多个线程
		*进程中的所有线程共享进程的空间资源（空间，全局变量，分配的内存等）
		*进程又有自己的特有属性，比如 指令集，TID等

	实现：
		import threading

		th = threading.Thread()
		功能：创建线程
		参数：target 线程函数
			 args   元祖，给线程函数传参
			 kwargs 字典，给线程函数字典传参
			 name   给线程取名字

		t.start() 	启动线程
		t.join(timeout)  回收线程

		t.is_alive() 查看线程状态
		
		t.name       查看线程名称

		threading.currentThread() 得到线程对象
		
		t.daemon 属性
			默认为 False 主线程执行完毕不会影响分支线程的执行
			如果为True 则主线程执行完毕，其他线程也会终止

			t.isDaemon():判断daemon属性是True 还是False

			设置方法：
				t.daemon = True
				t.setDaemon(True)

	线程的通信
		通过全局变量进行通信

	进程和线程的区别：
		1.两者都是多任务编程，均可使用计算机的多核
		2.进程的创建要比线程消耗更多的资源
		3.进程空间独立，数据安全性更好操作，有专门的进程间通信方式
		4.线程使用全局变量通信，往往要和同步互斥机制配合防止产生资源的争夺
		5.一个进程可以包含多个线程，线程共享进程的资源
		6.进程线程都有自己的特有资源
	
	使用场景：1.需要创建较多的并发，任务比较简单，线程比较合适
			2.如果程序间数据重叠比较多，要考虑到线程锁是否需要更复杂的逻辑
			3.如果多个任务并无关联性，不易用多线程将其融入到一个进程
			4.python中线程不适用于计算密集型的并发程序

	创建自定义线程类：
		1.继承Thread类
		2.重写run方法

	线程中同步互斥方法

	Event 线程事件
	Lock  线程锁

作业：
信号通信
司机和售票员
1.创建父子进程，分别表示司机和售票员
2.当售票员捕捉到SIGINT信号时，给司机发送SIGUSER1信号，此时司机打印'老司机开车了'
3.当售票员捕捉到SIGQUIT时，给司机发送SIGUSER2信号，此时司机打印'寄好安全带，车速有点快'
4.当司机捕捉到SIGSTP时，发送SIGUSER1 给售票员，售票员打印"到站了，请下车"
5.到站后，售票员先下车，然后司机下车

温馨提示：键盘发送信号时，信号会发送给终端的每一个进程


TFTP文件服务器
设计思路
文件的上传，下载，和服务端文件库的查看

服务端 
客户端 
	1.查看文件库中有那些文件
	2.选择其中的文件下载到本地
	3.将本地的文件上传到文件库
	4.多客户端同时操作
tcp协议
		
