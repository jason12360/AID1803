day08笔记

并发：
	定义：同时处理多个请求，但是内核采用轮询时间片的方法逐个访问，某一时间点只处理一个任务
    示例：IO多路复用，协程，循环服务器
	特点：单线程
并行：
	定义：使用多个内核同时执行多个任务
	示例：多进程，多线程
	使用场景：有一端需要长期占有资源

计算机基础知识：1.计算机原理
	         2.算法导论

公众号：
	python程序员
	python开发者

app：掘金

*********************************************************************************
线程：
	同步互斥方法：
		3.条件变量condition
			con = threading.Condition()
				作用：创建条件变量
			con.acquire()
				作用：对资源加锁，加锁后，其他位置再加锁则阻塞
			con.release()
				作用：解锁
			con.wait()
				作用：wait函数只能在加锁的状态下使用。
					 wait函数会先解锁(release),然后让线程处于等待通知的阻塞状态
			con.notify()
				作用：发送通知，线程接收到通知后，结束wait阻塞，并且执行acquire加锁操作
	threadpool 第三方模块

	python 线程之GIL
		全局解释器锁
		python --->支持多线程 --->同步互斥--->加锁--->超级锁--->在同一时刻，解释器只能解释一个线程
		--->大量python库为了省事沿用了这种方法--->python多线程效率低下

		GIL问题：由于python的全局解释器锁造成python的多线程执行效率低下

		解决方法：
		*不使用线程，使用多进程
		*不使用c c++做解释器
		*python线程适合高延时的IO操作，网络IO。不适合cpu密集型程序

设计模式：
	设计模式代表了一种最佳实践，是被开发人员长期总结，用来解决某一类问题的思路方法。这些方法保证了代码的效率也易于理解

	举例：生产者模式

	生产者消费者

		控制数据资源数量
		降低耦合度

总结：
1.进程线程区别和联系
2.同步互斥的意义和实现方法
3.进程线程使用什么样的方式通信
4.进程线程的特点和选择
5.简单的设计模式的理解
6.僵尸进程，进程状态，GIL等概念的理解

服务器模型

	硬件服务器：主机，集群

	软件服务器：网络服务器 在后端提供网络功能，逻辑处理，数据处理的程序或者架构等

	服务器架构：C/S 客户端服务器
			  B/S 浏览器服务器

	服务器追求： 处理速度快，数据更安全，并发量大

	硬件：更高配置，更多主机，集成，分布
	软件：程序占有更少的资源，更流畅的运行，处理更多的并发

基本的服务器模型：

	并发服务器：
		1.循环：
			原理：单线程程序，循环的接收连接或者请求，然后处理，处理后继续循环
			缺点：不能同时处理多个客户端的并行，不予许某个客户长期占有服务器
			优点：结构比较简单，使用于UDP程序，要求处理请求可以很快完成
		2.并发模式
		3.IO多路复用
			原理：通过监控多个IO来达到IO并发的目的
			缺点：也是单线程，不能够长期阻塞，不适合处理大量CPU占用高的程序
			优点：开销小，比较适合IO密集型的服务器程序

	并行服务器：
		1.每有一个客户端连接处理，就创建一个新的进程或者线程处理客户端的请求，而主进程/主线程可以继续接收其他客户端的连接

		2.缺点：资源消耗大
		3.适用于客户端需要长期占有服务器的情况

		4.基于fork的多进程并发
			1.创建套接字
			2.绑定套接字
			3.监听套接字
			4.接收客户端请求
			5.创建子进程，处理客户端请求，父进程继续准备接受新的客户端连接
			6.客户端退出，则销毁相应的子进程

 		
os.lisrdir(path) 返回一个该路径下的文件的字符串列表
os.path.isfile(path) 返回该路径下的文件是否为文件
os.path.isdir(path) 返回该路径下的文件是否为文件夹


