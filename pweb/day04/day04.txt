IO

阻塞
非阻塞
多路复用
超时检测

*********************************

linux下文件分类：

    b         c         d      -         
块设备文件 字符设备文件 （文件夹）（普通文件）  
	l         s         p
（链接文件） 套接字文件   管道文件

本地套接字：
	意义：在Linux/unix系统下，提供本地进程间通信的一种方式

	本地套接字创建流程
		1.创建套接字文件
		2.绑定套接字文件
		3.监听
		4.接收连接
		5.消息收发
		6.关闭连接
	示例：
		见local_socket_server 和 local_socket_client

*cookie:
	os.unlink() or os.remove()
		功能：删除某个文件
		参数：一个路径文件
	os.path.exist()
		功能：盘点一个文件是否存在
		参数：一个路径文件


多任务编程

	通过应用程序利用多个计算机核心达到多任务同时执行的目的，以此来提升程序执行效率

	多进程，多线程

进程：
	定义：
		程序在计算机中一次执行的过程
	程序与进程：
		程序：是一个静态的描述，不占有计算机资源
		进程：是一个动态的过程，占有cpu内存的计算机资源，有一定的生命周期
		*同一个程序，每次执行都是不同的进程
	1.进程的创建流程
		1.用户空间运行程序，发起进程创建申请
		2.调用操作系统内核借口创建进程
		3.分配计算机资源，确定进程状态
		4.将新的进程提供给用户使用

	2.多个进程，如何占用cpu
		*同一内核同一时刻只能运行一个任务
		*多个进程对内核资源进行争夺，操作系统决定哪个进程占有计算机核心
		*占有计算机核心的进程称为该进程占有cpu的时间片

	3.进程有哪些信息，如何保存
		PCB(Process Control Block) 进程控制块:
			1.在*nix系统中进程创建后，会在内存开辟一块空间存放进程的相关信息，称为该进程的PCB

			2.信息：用户 pid 占用内存 优先级 等
			
			3.终端命令：*ps -aux
			USER     PID   (%CPU %MEM VSZ RSS TTY)  STAT START   TIME         COMMAND
			操作用户  进程号					       进程状态 开始时间 占有cpu的时间  通过什么命令启动

			4.PID： 在操作系统中进程的唯一标志，是大于0的整数，由系统自动分配的		

	4.进程的特征
		1.进程是操作系统资源分配的最小单位
		2.没个进程单独占有4G虚拟内存
		3.进程之间相互独立，运行不收影响

	5.进程的状态
		1.三态：
			1.就绪态:进程具备运行条件，等待系统分配处理器运行
			2.运行态：进程占有cpu处于运行的状态
			3.等待态：又称为阻塞态，睡眠态，指进程暂时不具备运行的条件，需要阻塞等待(sleep accept...)


			  调度        IO请求
		    ------>     ------>
		就绪         执行        等待/阻塞
		 ^  <------                 |
		 |   时间片完成               |
         |--------------------------|
         			IO完成

        2.五态：
        	1.新建态：创建一个进程，获取一个资源，直接表现为运行一个程序，或者在程序中创建一个新的进程
        	2.就绪
        	3.执行
        	4.等待
        	5.终止态：进程执行结束，资源回收过程
			   创建成功   	调度      IO请求
			   ---->	 ------>     ------>
			新建  	就绪         执行        等待/阻塞  终止
					 ^  <------                 |
					 |   时间片完成               |
			         |--------------------------|
			         			IO完成

	    3.STAT 表示进程状态

		    D 等待态 （不可中断）
		    S 等待态 （可中断）
		    T 等待态 （暂停）
		    R 运行态
		    Z 僵尸态

		    + 前台进程 （不带加号即为后台进程）
		    < 高优先级
		    N 低优先级
		    l 有进程链接
		    s 会话组

	6.进程优先级
		1.优先级决定了一个进程的执行权限和占有资源的优先程度

		*~$top:动态查看当前运行的状态 q退出 ">""<"翻页

		2.linux中优先级范围 -20 ---- 19 数字越小，优先级越高

		3.linux中用户程序默认优先级为0

		4.nice:以指定的优先级运行进程
			eg nice -9 ./while.py 以9的优先级运行此程序
				sudo nice --9 ./while.py 以-9的优先级运行此程序
		  renice: 改变某个进程的优先级
		  	eg renice 2 PID
	7.父子进程：在系统中除了初始化进程其他进程都有一个父进程，可能有多个子进程

		(process)
		进程树 pstree

	8.要求：
		1.什么是进程，进程的特征
		2.进程状态，每种状态怎么回事
		3.进程和线程的区别

需求：编写一个程序，可以同时做多件事情

方案：使用两个进程分别完成预定事件

	import os

	os.fork()
		功能：创建一个新的进程
		参数：无
		返回值：失败返回一个负数 -1
			   成功返回：
			   	1.0 在子进程中fork的返回值
			   	2.>0的正整数（新的进程的PID)在父进程中的返回值

* 父进程中fork之前的内容子进程同样会复制，但父子进程空间独立,fork之后的修改不会影响到对方
* 父子进程在执行上互不影响，谁先执行，谁先执行完不确定
* 子进程虽然复制父进程的空间，但是有自己的特性，比如自己的PID，进程PCB，进程栈空间等。

进程的相关函数：
	获取PID号
		os.getpid()
		功能：获取当前进程的PID
		返回值：当前进程的PID

		ps.getppid()
		功能：获取当前进程父进程的PID
		返回值：当前进程父进程的PID

	进程的退出
		os._exit(status)
		功能：结束一个进程
		参数：表示进程的结束状态 是一个整数

		sys.exit([status])
		功能：结束一个进程，抛出异常SystemExit
		参数：传入一个正整数表示结束状态
			 传入字符串表示结束打印

	*孤儿进程：父进程先于子进程退出，此时此子进程变为孤儿进程

		*孤儿进程会被系统制定的进程所“收养”，即该进程称为孤儿进程新的父进程。

	僵尸进程：子进程先于父进程退出，但是父进程没有处理子进程的退出状况，子进程就会称为僵尸进程

		*僵尸进程会滞留PCB的部分信息在内存中，大量的僵尸进程会消耗系统资源，所以应该尽量避免僵尸进程的产生

	如何避免僵尸进程的产生：
		1.让父进程先退出（不好控制）
		2.让父进程处理子进程的退出
			1.使用wait或waitpid函数
				 os.wait:
				 	功能：等待子进程的退出进行处理
				 	参数：无
				 	返回值：一个元祖，第一值为退出的子进程pid，第二个值为子进程退出状态
				os.waitpid(pid,option)
					功能：处理子进程的退出
					参数：pid: -1 表示等待任意的子进程退出
							  >0 表示等待相应PID号的子进程
						 option 0 表示阻塞等待
						 	    WNOHANG 表示非阻塞等待
					返回值：同wait
						os.waitpid(-1,0) == os.wait()s
			2.使用信号处理
		3.创建二级子进程
			
	
	作业：
	1.学习os.waitpid()的使用
	2.写一个群聊聊天室
	*选择使用什么样的套接字
		功能描述：
			1.类似于qq群聊，用户再加入聊天室时有一个简单的登录输入用户名即可
			2.需要个数据结构保存用户
			3.当一个人发送消息，其他人可以接收消息
				张三：****
			4.当一个人登录退出时，给其他人一些提示
				***登陆了
				***退出了
			5.管理员发送消息，全部在线成员均可收到

