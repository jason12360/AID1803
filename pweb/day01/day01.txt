吕泽
lvze@tedu.com.cn

网络 --> 进程线程-->web服务器
mongo--> regex --> 项目

互联网 --> 网络传输数据

ISO(国际标准化组织) --> 网络体系结构标准 OSI模型

OSI(Open System Interconnection)七层模型
    应用层 Application
    表示层 Presentation
    会话层 Session
    传输层 Transport
    网络层 Network
    链路层 Data Link
    物理层 Physical

    1.应用层 Application
        提供用户服务，具体内容由特定程序规定
    2.表示层 Presentation
        提供数据的压缩解压和加密等
    3.会话层 Session
        建立程序级的连接，决定使用什么样的传输服务
    4.传输层 Transport
        提供合适的通信服务，流量控制
    5.网络层 Network
        路由选择，网络互联，分组传输
    6.链路层 Data Link
        提供链路交换，具体消息发送
    7.物理层 Physical
        物理硬件，接口

    OSI模型优点：将功能分开，降低了网络传输中的耦合度，每一部分完成自己的功能，开发更加清晰。

编程的基本原则：
    高内聚：使单个模块的功能尽量单一
    低耦合：模块之间尽量减少相互的影响

四层、五层模型

    四层：
    应用层：Application，Presentation,Session
    传输层：Transport
    网络层：Network
    物理电路层：DataLink，Physical

    五层模型（TCP/IP模型）
    应用层：Application，Presentation,Session
    传输层：Transport
    网络层：Network
    链路层：Data Link
    物理层：Physical

    要求：能够顺序说出七层模型，知道如何对应四层五层模型，简单理解每一层的功能，能理解数据传输过程

什么是协议（protocol）

    网路协议：网络通信中，各方必须遵守的规定，包括建立什么连接，如何识别，消息结构等

    应用层：TFTP，HTTP，SMTP，DNS

    传输层：TCP，UDP（重点）

    网络层：IP

网络概念：
    主机：计算机的名称 localhost 
    
    In [1]: import socket
        获取主机名
        In [2]: socket.gethostname()
        Out[2]: 'tedu'
        通过主机名解析IP
        In [3]: socket.gethostbyname('tedu')
        Out[3]: '127.0.1.1'
    
    IPv4:192.168.1.2 点分是十进制：三个点分为四个部分0-255 (32bits)
    IPv6:6组16进制 ，ip地址更多 48bits

    127.0.0.1: 本地的测试ip
    0.0.0.0: 局域网可用ip
    192.168.1.0: 表示网段
    192.168.1.1：表示网关
    192.168.1.255：广播地址
linux相关命令
    ifconfig
    ping
socket相关函数：

    将ip地址转换为二进制
    In [8]: socket.inet_aton('192.168.1.2')
    Out[8]: b'\xc0\xa8\x01\x02'

    将二进制装换为点分十进制
    In [9]: socket.inet_ntoa(b'\xc0\xa8\x01\x02')
    Out[9]: '192.168.1.2'
    
    inet_pton inet_ntop 功能同上，只是第一参数
        用socket.AF_INET表示IPv4
        用socket.AF_INET6表示Ipv6
    In [11]: socket.inet_pton(socket.AF_INET,'192.168.1.2')
    Out[11]: b'\xc0\xa8\x01\x02'

端口：
    端口号是地址的组成部分，在一个系统中区分应用层程序
    端口取值：1--65535
        1-255 众所周知的端口 
        256-1023 系统端口 
        1024-65535 可使用端口（推荐使用>10000 端口)
    端口测试函数：
        返回对应程序所使用的端口：    
            In [12]: socket.getservbyname('mysql')
            Out[12]: 3306

            In [13]: socket.getservbyname('http')
            Out[13]: 80

            In [14]: socket.getservbyname('ssh')
            Out[14]: 22
子网掩码: 和IP配合过滤网段的
dns:    域名解析

字节序：
    大端序 big endian 高字节存在低地址
    小端序 little endian 低字节存在低地址
    网络字节序--> 大端序 将字节序发送方式统一

传输层服务

tcp协议 Transmission Control Protocol
    面向连接 ---> 可靠的数据传输
        三次握手示意
            client                     server
               |       syn=1 sep=x       | 
               |----------------------- >|
               |                         |
               |       syn=1 ack=x+1     |
               |<------------------------|
               |         sep=y           |
               |                         |
               |------------------------>|
               |      ack=y+1 sep=z      |
            1.客户端向服务器发起连接请求（问是否可以连接）
            2.服务器接收到请求后进行确认（允许连接）返回报文
            3.客户端收到许可，建立连接

        四次挥手
             主动方                     被动方
               |       fin=1 ack=z       | 
               |----------------------- >|
               |          sep=x          |
               |                         |
               |       ack=x+1 sep=z     |
               |<------------------------|
               |                         |
               |      fin=1 ack=x        |
               |<------------------------|
               |          sep=y          |
               |                         |
               |------------------------>|
               |      ack=y sep=x        |
            1.主动方发送报文告知被动方要断开连接
            2.被动方返回报文告知收到请求，准备断开
            3.被动方发送报文给主动方，告知准备就绪，可以断开
            4.主动方发送报文确定断开

    可靠传输：无失序，无差错，无丢失，无重复
    应用情况：适用于传输内容较大，网络情况好，需要提供准确传输的情况，比如：聊天信息，文件传输，邮件

UDP协议 User Datagram Protocol
    面向无连接的服务--> 不可靠 
    发送时由发送端自主进行，不考虑接收端

    应用情况：网络较差，对传输准确性要求低，广播组播。比如：视频会议，广播数据

套接字编程 
    套接字：进行网络通信的一种手段 socket
    流式套接字SOCK_STREAM 传输层基于TCP协议进行通信
    数据报套接字SOCK_DGRAM 传输层基于UDP协议进行通信
    原始套接字SOCK_RAW 访问底层协议的套接字
    
    TCP 服务端
    1.创建套接字
    socket(socket_family = AF_INET,socket_type = SOCK_STREAM,proto = 0)    
        功能：创建套接字
        参数：socket_family: 选择地址族种类 AF_INET
             socket_type: SOCK_STREAM,SOCK_DGRAM
             proto:子协议类型，通常为0
        返回值：返回创建的套接字
    2.绑定IP和端口号
    sockfd.bind(（'192.168.2.1',8888))
        功能：绑定IP和端口
        参数：是一个元组，第一项是字符串形式的IP
                        第二项是端口号
        示例：（'192.168.2.1',8888)
        返回值：None                
    3.让套接字具有监听功能
    sockfd.listen(n)
        功能：使套接字变为监听套接字，同时创建监听队列
        参数：n监听队列大小
        返回值：None
    4.等待客户带连接
    socksd = sockfd.accept()[0]
        功能：阻塞等待客户端连接
        返回值：第一个：返回一个新的套接字用来和客户端通信
               第二个：返回连接的客户端的地址
    5.消息的收发
    recv(buffer)
        功能：接受消息
        参数：buffer 一次接受消息的大小 字节
        返回值：接收的内容
    send(data)
        功能：发送消息
        参数：发送的内容 （字节流）
        返回值： 发送了多少个字节
        当没有接收端时send操作会导致broken pipe
    6.关闭套接字
    close()
        功能：关闭套接字
    见 sock_stream_server.py

    TCP客户端流程

    1.创建流式套接字
    2.发起连接请求
        connect()
        功能：发起连接
        参数：一个元组 第一个元素：服务器的IP
                     第二个元素：服务器的端口
    3.收发消息

1.练习
1.什么是网络七层，每一层什么功能。tcp/ip模型又是什么
2.简述三次握手和四次握手的过程
3.使用tcp完成一个简单的对话交互









    





